include::license.txt[]

:language: C

Libevent 레퍼런스 메뉴얼: 서언
--------------------------------------------

1만 피트 위에서 Libevent 보기
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Libevent는 빠르고 이식성 있는 nonblocking I/O 프로그램을 작성하기 위한 라이브러리입니다.
디자인 목표는 다음과 같습니다.

이식성(Portability)::
	Libevent를 사용하여 작성된 프로그램은 Libevent가 지원하는 모든 플랫폼에서 동작해야 합니다.
	nonblocking I/O를 위한 _좋은_ 방법이 정말로 없는 환경일지라도
	Libevent는 그럭저럭 괜찮은 방식을 지원하게 되므로
	여러분의 프로그램은 제한된 환경에서도 동작할 수 있습니다.

속도(Speed)::
	Libevent는 각 플랫폼에서 가능한 가장 빠른 nonblocking I/O 구현을 사용하게 되며,
	그렇기 때문에 많은 오버헤드를 주지 않도록 되어 있습니다.

확장성(Scalability)::
	Libevent는 수만 개의 활성화된 소켓이 필요한 프로그램에서도 잘 동작하도록 설계되어 있습니다.

편리함(Convenience)::
	Libevent을 통해 프로그램을 작성하는 가장 자연스러운 방식이
	가능하다면 언제나 견고하고 이식성이 좋도록 하였습니다.


Libevent는 다음과 같은 컴포넌트로 나뉘어 집니다:

evutil::
	다양한 플랫폼의 네트워킹 구현 사이의 차이점들을 추상화하는
	일반화된 기능을 제공합니다.

event and event_base::
	Libevent의 핵심입니다. 다양하고 플랫폼에 특화된 이벤트 기반의
	nonblocking I/O 기반(backend)을 지원하기 위한 하나의 추상 API를 제공합니다.
	이 API는 소켓의 읽기/쓰기 준비 상태를 알려주고
	기본적인 timeout 기능과 더불어 운영체제의 시그널(signal)을 감지(detect)합니다.

bufferevent::
	이 컴포넌트의 함수들은 Libevent의 이벤트 기반의 핵심부분(core)을 감싸주는
	좀 더 편리한 wrapper를 제공합니다.
	이 함수들은 어플리케이션이 버퍼를 사용한 읽기/쓰기 요청을 할 수 있도록 해주고,
	소켓이 동작 가능하게 되었을 때가 아니라
	I/O가 실제로 발생했을 때 알려주도록 되어 있습니다.	

	또한 bufferevent 인터페이스는 다중 백엔드(backend)를 지원하기 때문에
	Windows IOCP API 같이 nonblocking I/O를 위한 좀더 빠른 방식을 지원하는
	시스템의 이점을 살릴 수 있습니다.

evbuffer::
	이 모듈은 bufferevents에서 사용되는 버퍼를 구현하며
	효율적이고(and/or) 편리한 접근을 위한 함수들을 제공합니다.

evhttp::
	단순한 HTTP 클라이언트/서버 구현.

evdns::
	단순한 DNS 클라이언트/서버 구현.

evrpc::
	단순한 RPC 구현.



라이브러리
~~~~~~~~~~~~~

Libevent가 빌드되면 기본적으로 다음과 같은 라이브러리들이 설치됩니다.

libevent_core::
	모든 핵심 이벤트와 버퍼 기능들이 있습니다.
	이 라이브러리는 event_base, evbuffer, bufferevent 및 유틸리티 함수들을 모두 포함합니다.

libevent_extra::
	이 라이브러리는 프로그램에 선택적으로 포함시킬 수 있는
	프로토콜에 특화된 기능을 정의합니다. HTTP, DNS, RPC를 포함합니다.

libevent::
	이 라이브러리는 하위 호환성을 위해(historical reasons) 존재하며
	libevent_core, libevent_extra 라이브러리의 내용이 둘 다 포함되어 있습니다.
	여러분은 이 라이브러리를 사용하면 안되며 Libevent 차기 버전에서는 사라질 수도 있습니다.

다음 라이브러리들은 특정 플랫폼에서만 설치됩니다.

libevent_pthreads::
	이 라이브러리는 이식성 있는 쓰레딩 라이브러리인 pthreads에 기반한
	쓰레딩과 locking 구현을 추가합니다.
	이 구현은 libevent_core와 분리되어 있는데, 그 이유는 Libevent를
	_실제로_ 멀티쓰레딩 방식으로 사용하지 않는 이상 pthreads를 링크할 필요가 없기 때문입니다.

libevent_openssl::
	이 라이브러리는 bufferevents와 OpenSSL 라이브러리를 사용하여
	암호화된 통신 지원을 제공합니다. 이 구현이 libevent_core와 분리되어 있는 이유는
	_실제로_ 암호화된 연결을 사용하지 않을 경우 Libevent를 사용하기 위해
	OpenSSL 라이브러리를 함께 링크하지 않도록 하기 위해서입니다.

헤더
~~~~~~~~~~~

현재 Libevent 헤더파일(public headers)은 모두 'event2' 디렉토리에 설치됩니다.
헤더 파일은 크게 세 종류로 나뉩니다.

API headers::
	API 헤더들은 Libevent를 사용하기 위한 현재 공개된 인터페이스를 정의합니다.
	API 헤더에는 특별한 접미사 규칙이 없습니다.

Compatibility headers::
	호환성 헤더에는 더 이상 쓰이지 않는(deprecated) 함수 정의가 포함되어 있습니다.
	구 버전의 Libevent를 사용하는 프로그램을 포팅하지 않는 이상 include 하지 마세요.

Structure headers::
	이 범주에 속하는 헤더들은 상대적으로 모습이 자주 변하는 구조체들을 정의합니다.
	몇몇은 구조체 컴포넌트에 대한 빠른 접근이 필요할 경우를 위해 노출되며
	어떤 것들은 하위 호환성을 위해 노출되어 있습니다.
	이러한 헤더에 있는 구조체중 어떤 것이라도 직접적으로 사용하면
	여러분의 프로그램과 다른 버전의 Libevent와의 바이너리 호환성이 깨지게 됩니다(때로는 디버깅 하기 어려운 방식으로).
	이러한 헤더들은 "_struct.h"를 접미사로 가집니다.
	
('event2' 디렉토리에 없는 이전 버전의 Libevent 헤더들이 있습니다.
아래의 "이전 버전의 Libevent를 함께 사용하여 작업해야 한다면" 부분을 보세요.)

이전 버전의 Libevent를 함께 사용하여 작업해야 한다면
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Libevent 2.0 has revised its APIs to be generally more rational and
less error-prone.  If it's possible, you should write new programs to
use the Libevent 2.0 APIs.  But sometimes you might need to work with
the older APIs, either to update an existing application, or to
support an environment where for some reason you can't install
Libevent 2.0 or later.

Older versions of Libevent had fewer headers, and did not install them
under "event2":

[options="header",width="80%",cols="30%,70%"]
|======================================================================
| OLD HEADER... | ...REPLACED BY CURRENT HEADERS
| event.h    | event2/event*.h, event2/buffer*.h event2/bufferevent*.h
event2/tag*.h
| evdns.h    | event2/dns*.h
| evhttp.h   | event2/http*.h
| evrpc.h    | event2/rpc*.h
| evutil.h   | event2/util*.h
|======================================================================

In Libevent 2.0 and later, the old headers still exist as wrappers for
the new headers.

Some other notes on working with older versions:

- Before 1.4, there was only one library, "libevent", that contained
  the functionality currently split into libevent_core and
  libevent_extra.
- Before 2.0, there was no support for locking; Libevent could be
  thread-safe, but only if you made sure to never use the same
  structure from two threads at the same time.

Individual sections below will discuss the obsolete APIs that you
might encounter for specific areas of the codebase.

Notes on version status
^^^^^^^^^^^^^^^^^^^^^^^

Versions of Libevent before 1.4.7 or so should be considered totally
obsolete.  Versions of Libevent before 1.3e or so should be considered
hopelessly bug-ridden.

(Also, please don't send the Libevent maintainers any new features for
1.4.x or earlier---it's supposed to stay as a stable release.  And
if you encounter a bug in 1.3x or earlier, please make sure that it
still exists in the latest stable version before you report it:
subsequent releases have happened for a reason.)

